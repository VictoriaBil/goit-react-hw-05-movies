{"version":3,"file":"static/js/145.d74632bf.chunk.js","mappings":"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","sources":["API/FetchApi.jsx","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'fa2d81658e7600d0ffe01f5c9f2cea9c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getMovieTrending = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieSearch = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.data.results.length === 0) {\n      alert('There are no such movies');\n    }\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      {movies.map(({ title, id }) => {\n        return (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <h1>{title}</h1>\n            </Link>\n          </li>\n        );\n      })}\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const onInputChange = e => setValue(e.target.value);\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    onSubmit(value);\n    resetForm();\n  };\n\n  const resetForm = () => setValue('');\n\n  return (\n    <div>\n      <form onSubmit={onSubmitForm}>\n        <input\n          type=\"text\"\n          value={value}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies...\"\n          onChange={onInputChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { MoviesList } from '../../components/MovieList/MovieList';\nimport { SearchForm } from '../../components/SearchForm/SearchForm';\nimport { getMovieSearch } from '../../API/FetchApi';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../../Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [onLoad, setOnLoad] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchValue = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!searchValue) return;\n    setOnLoad(true);\n    getMovieSearch(searchValue).then(response => {\n      setMovies([...response]);\n      setOnLoad(false);\n    });\n  }, [searchValue]);\n\n  const onInputSearch = value => {\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <main>\n      <SearchForm onSubmit={onInputSearch} />\n      {onLoad && <Loader />}\n      {movies && <MoviesList movies={movies} />}\n    </main>\n  );\n};\nexport default Movies;\n"],"names":["API_KEY","BASE_URL","getMovieTrending","axios","response","data","results","alert","console","log","getMovieSearch","query","length","getMovieDetails","id","getMovieCredits","movieId","cast","getMovieReviews","MoviesList","movies","location","useLocation","map","title","to","state","from","SearchForm","onSubmit","useState","value","setValue","resetForm","e","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","target","setMovies","onLoad","setOnLoad","useSearchParams","searchParams","setSearchParams","searchValue","get","useEffect","then","Loader"],"sourceRoot":""}