{"version":3,"file":"static/js/229.d705814f.chunk.js","mappings":"8SAEMA,EAAU,mCACVC,EAAW,+BAEJC,EAAgB,mCAAG,6GAELC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAHhB,cAEtBI,EAFsB,yBAKrBA,EAASC,KAAKC,SALO,gCAO5BC,MAAM,mCACNC,QAAQC,IAAR,MAR4B,yDAAH,qDAYhBC,EAAc,mCAAG,WAAMC,GAAN,gGAEHR,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBACgCW,IAH7B,cAKW,KAH/BP,EAFoB,QAKbC,KAAKC,QAAQM,QACxBL,MAAM,4BANkB,kBAQnBH,EAASC,KAAKC,SARK,gCAU1BC,MAAM,mCACNC,QAAQC,IAAR,MAX0B,yDAAH,sDAedI,EAAe,mCAAG,WAAMC,GAAN,gGAEJX,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAa,EADA,oBACcd,IAHV,cAErBI,EAFqB,yBAKpBA,EAASC,MALW,gCAO3BE,MAAM,mCACNC,QAAQC,IAAR,MAR2B,yDAAH,sDAYfM,EAAe,mCAAG,WAAMC,GAAN,gGAEJb,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAe,EADA,4BAC2BhB,IAHvB,cAErBI,EAFqB,yBAKpBA,EAASC,KAAKY,MALM,gCAO3BV,MAAM,mCACNC,QAAQC,IAAR,MAR2B,yDAAH,sDAYfS,EAAe,mCAAG,WAAMF,GAAN,gGAEJb,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAe,EADA,4BAC2BhB,IAHvB,cAErBI,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAO3BC,MAAM,mCACNC,QAAQC,IAAR,MAR2B,yDAAH,qD,gKCtDfU,EAAOC,EAAAA,GAAAA,GAAH,4IASJC,EAAOD,EAAAA,GAAAA,GAAH,6MAOJE,EAAOF,EAAAA,GAAAA,EAAH,iEAKJG,EAASH,EAAAA,GAAAA,EAAH,4C,SCpBNI,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OAAKA,GAAYA,EAAQb,QAIvB,SAACO,EAAD,UACGM,EAAQC,KAAI,YAA8B,IAA3BZ,EAA0B,EAA1BA,GAAIa,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAACP,EAAD,YACE,UAACC,EAAD,sBAAeK,MACf,SAACJ,EAAD,UAASK,MAFAd,EAKd,OAXI,oEAcV,E,SCiBD,EA9BgB,WACd,IAAQE,GAAYa,EAAAA,EAAAA,MAAZb,QACR,GAAwCc,EAAAA,EAAAA,YAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBF,GAAU,GAFY,UAGHlB,EAAAA,EAAAA,IAAgBF,GAHb,OAGhBX,EAHgB,OAItB2B,EAAgB3B,GAChB+B,GAAU,GALY,gDAOtBF,EAAS,EAAD,IAPc,yBAStBE,GAAU,GATY,4EAAH,qDAYvBE,GACD,GAAE,CAACtB,KAGF,gCACGmB,IAAU,SAACI,EAAA,EAAD,IACVR,IAAgB,SAACP,EAAD,CAAaC,QAASM,IACtCE,IAAS,qEAGf,C","sources":["API/FetchApi.jsx","components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'fa2d81658e7600d0ffe01f5c9f2cea9c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getMovieTrending = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieSearch = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.data.results.length === 0) {\n      alert('There are no such movies');\n    }\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  border: 1px solid teal;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Name = styled.p`\n  font-weight: 700;\n  padding: 0 10px;\n`;\n\nexport const Review = styled.p`\n  padding: 0 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { List, Item, Name, Review } from '../ReviewsList/ReviewsList.styled';\n\nexport const ReviewsList = ({ reviews }) => {\n  if (!reviews || !reviews.length) {\n    return <p>No information about reviews is available</p>;\n  }\n  return (\n    <List>\n      {reviews.map(({ id, author, content }) => {\n        return (\n          <Item key={id}>\n            <Name>Author: {author}</Name>\n            <Review>{content}</Review>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from '../../API/FetchApi';\nimport { ReviewsList } from '../../components/ReviewsList/ReviewsList';\nimport { Loader } from '../../Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState();\n  const [error, setError] = useState(null);\n  const [onLoad, setOnLoad] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        setOnLoad(true);\n        const data = await getMovieReviews(movieId);\n        setMovieReviews(data);\n        setOnLoad(false);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setOnLoad(false);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {onLoad && <Loader />}\n      {movieReviews && <ReviewsList reviews={movieReviews} />}\n      {error && <p>Something went wrong. Please, try again</p>}\n    </>\n  );\n};\nexport default Reviews;\n"],"names":["API_KEY","BASE_URL","getMovieTrending","axios","response","data","results","alert","console","log","getMovieSearch","query","length","getMovieDetails","id","getMovieCredits","movieId","cast","getMovieReviews","List","styled","Item","Name","Review","ReviewsList","reviews","map","author","content","useParams","useState","movieReviews","setMovieReviews","error","setError","onLoad","setOnLoad","useEffect","fetchMovieReviews","Loader"],"sourceRoot":""}