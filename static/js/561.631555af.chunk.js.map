{"version":3,"file":"static/js/561.631555af.chunk.js","mappings":"8SAEMA,EAAU,mCACVC,EAAW,+BAEJC,EAAgB,mCAAG,6GAELC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAHhB,cAEtBI,EAFsB,yBAKrBA,EAASC,KAAKC,SALO,gCAO5BC,MAAM,mCACNC,QAAQC,IAAR,MAR4B,yDAAH,qDAYhBC,EAAc,mCAAG,WAAMC,GAAN,gGAEHR,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBACgCW,IAH7B,cAKW,KAH/BP,EAFoB,QAKbC,KAAKC,QAAQM,QACxBL,MAAM,4BANkB,kBAQnBH,EAASC,KAAKC,SARK,gCAU1BC,MAAM,mCACNC,QAAQC,IAAR,MAX0B,yDAAH,sDAedI,EAAe,mCAAG,WAAMC,GAAN,gGAEJX,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAa,EADA,oBACcd,IAHV,cAErBI,EAFqB,yBAKpBA,EAASC,MALW,gCAO3BE,MAAM,mCACNC,QAAQC,IAAR,MAR2B,yDAAH,sDAYfM,EAAe,mCAAG,WAAMC,GAAN,gGAEJb,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAe,EADA,4BAC2BhB,IAHvB,cAErBI,EAFqB,yBAKpBA,EAASC,KAAKY,MALM,gCAO3BV,MAAM,mCACNC,QAAQC,IAAR,MAR2B,yDAAH,sDAYfS,EAAe,mCAAG,WAAMF,GAAN,gGAEJb,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAe,EADA,4BAC2BhB,IAHvB,cAErBI,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAO3BC,MAAM,mCACNC,QAAQC,IAAR,MAR2B,yDAAH,qD,+KCtDfU,EAAOC,EAAAA,GAAAA,GAAH,6HAQJC,EAAOD,EAAAA,GAAAA,GAAH,kOAQJE,EAAQF,EAAAA,GAAAA,IAAH,6CAILG,EAAWH,EAAAA,GAAAA,IAAH,+CAIRI,EAAYJ,EAAAA,GAAAA,EAAH,6CAITK,EAAOL,EAAAA,GAAAA,GAAH,wCAIJM,EAAgBN,EAAAA,GAAAA,EAAH,6C,SCtBbO,EAAW,SAAC,GAAc,IAAZV,EAAW,EAAXA,KACzB,OAAKA,GAASA,EAAKL,QAIf,SAACO,EAAD,UACGF,EAAKW,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,UAACX,EAAD,YACE,SAACC,EAAD,CACEW,IACmB,OAAjBJ,EAAA,0CACuCA,GACnCK,EAENC,IAAKJ,KAEP,UAACR,EAAD,YACE,SAACE,EAAD,UAAOM,KACP,UAACP,EAAD,0BACa,SAACE,EAAD,UAAgBM,YAZtBF,EAiBd,OAvBE,iEA0BV,ECpBD,EAfa,WACX,IAAQd,GAAYoB,EAAAA,EAAAA,MAAZpB,QACR,GAAkCqB,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,qGACF1B,EAAAA,EAAAA,IAAgBC,GADd,OACfX,EADe,OAErBkC,EAAalC,GAFQ,2CAAH,qDAIpBoC,GACD,GAAE,CAACzB,KAEG,8BAAGsB,IAAa,SAACX,EAAD,CAAUV,KAAMqB,KACxC,C","sources":["API/FetchApi.jsx","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'fa2d81658e7600d0ffe01f5c9f2cea9c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getMovieTrending = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieSearch = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.data.results.length === 0) {\n      alert('There are no such movies');\n    }\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    alert('Something went wrong.Try again!');\n    console.log(error);\n  }\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n`;\n\nexport const Item = styled.li`\n  max-width: 200px;\n  border: 1px solid teal;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  max-width: 200px;\n`;\n\nexport const CastInfo = styled.div`\n  padding-left: 10px;\n`;\n\nexport const Character = styled.p`\n  font-weight: 700;\n`;\n\nexport const Name = styled.h2`\n  color: teal;\n`;\n\nexport const CharacterInfo = styled.p`\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport noPoster from '../../image/noposter.webp';\nimport {\n  List,\n  Item,\n  Image,\n  Name,\n  CastInfo,\n  Character,\n  CharacterInfo,\n} from '../CastList/CastList.styled';\n\nexport const CastList = ({ cast }) => {\n  if (!cast || !cast.length) {\n    return <p>No information about cast is available</p>;\n  } else\n    return (\n      <List>\n        {cast.map(({ profile_path, cast_id, name, character }) => {\n          return (\n            <Item key={cast_id}>\n              <Image\n                src={\n                  profile_path !== null\n                    ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                    : noPoster\n                }\n                alt={name}\n              />\n              <CastInfo>\n                <Name>{name}</Name>\n                <Character>\n                  Character: <CharacterInfo>{character}</CharacterInfo>\n                </Character>\n              </CastInfo>\n            </Item>\n          );\n        })}\n      </List>\n    );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      profile_path: PropTypes.string,\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCredits } from '../../API/FetchApi';\nimport { CastList } from '../../components/CastList/CastList';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      const data = await getMovieCredits(movieId);\n      setMovieCast(data);\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return <>{movieCast && <CastList cast={movieCast} />}</>;\n};\n\nexport default Cast;\n"],"names":["API_KEY","BASE_URL","getMovieTrending","axios","response","data","results","alert","console","log","getMovieSearch","query","length","getMovieDetails","id","getMovieCredits","movieId","cast","getMovieReviews","List","styled","Item","Image","CastInfo","Character","Name","CharacterInfo","CastList","map","profile_path","cast_id","name","character","src","noPoster","alt","useParams","useState","movieCast","setMovieCast","useEffect","fetchMovieCast"],"sourceRoot":""}